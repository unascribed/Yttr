buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.google.code.gson:gson:2.8.7'
	}
}
plugins {
	id 'fabric-loom' version '0.7-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
if (version.contains("{COMMIT}")) {
	def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()
	version = version.replace("{COMMIT}", 'git rev-parse --short HEAD'.execute().getText().trim()+(dirty ? '-dirty' : ''))
}
if (version.contains("{COMMITNUM}")) {
	version = version.replace("{COMMITNUM}", 'git rev-list --count HEAD'.execute().getText().trim())
}
group = project.maven_group

repositories {
	maven {
		url 'https://repo.unascribed.com'
		content {
			includeGroup 'com.unascribed'
		}
	}
	maven {
		url "https://maven.shedaniel.me/"
		content {
			includeGroup 'me.shedaniel'
			includeGroup 'me.shedaniel.cloth'
			includeGroup 'me.shedaniel.cloth.api'
			includeGroup 'dev.architectury'
		}
	}
	maven {
		url 'https://maven.terraformersmc.com/releases/'
		content {
			includeGroup 'dev.emi'
			includeGroup 'com.terraformersmc'
		}
	}
	maven {
		url 'https://ladysnake.jfrog.io/artifactory/mods'
		content {
			includeGroup 'io.github.onyxstudios.Cardinal-Components-API'
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "me.shedaniel:RoughlyEnoughItems:5.12.248"
	modImplementation "com.unascribed:ears-api:1.4.5"
	
	modImplementation "dev.emi:trinkets:2.6.7"
	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:2.8.3"
	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:2.8.3"

	modRuntime("com.terraformersmc:modmenu:1.16.22") {
		transitive = false
	}
}

minecraft {
	accessWidener "src/main/resources/yttr.accesswidener"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

jar {
	doFirst {
		StringBuilder bldr = new StringBuilder();
		File dir = file('build/classes/java/main');
		dir.eachFileRecurse(groovy.io.FileType.FILES, {
			if (it.name.endsWith(".class")) {
				bldr.append(it.getAbsolutePath().substring(dir.getAbsolutePath().length()+1))
				bldr.append("\n")
			}
		})
		file('build/tmp/yttr-classes.txt').text = bldr.toString();
	}
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	from "build/tmp/yttr-classes.txt"
}

task amendJar {
	def amender = evaluate(file("JarAmender.groovy"))
	dependsOn remapJar
	doFirst {
		amender(remapJar.archivePath)
	}
}

tasks.remapJar.finalizedBy amendJar